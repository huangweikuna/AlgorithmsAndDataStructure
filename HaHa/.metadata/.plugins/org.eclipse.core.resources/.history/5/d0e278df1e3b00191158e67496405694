/**
 *
 */
package AVLTree;

import java.util.ArrayList;

public class AVLTree<K extends Comparable<K>, V> {
	private class Node {
		public K key;
		public V value;
		public Node left, right;
		public int height;

		public Node(K key, V value) {
			this.key = key;
			this.value = value;
			left = null;
			right = null;
			height = 1;
		}
	}

	private Node root;
	private int size;

	public AVLTree() {
		root = null;
		size = 0;
	}

	public int getSize() {
		return size;
	}

	public boolean isEmpty() {
		return size == 0;
	}

	public boolean isBST() {
		ArrayList<K> keys = new ArrayList<>();
		inOrder(root, keys);
		for (int i = 1; i < keys.size(); i++) {
			// 进行中序排序之后获得一个升序的序列 如果前一个数大于后一个数则不是二分搜索树
			if (keys.get(i - 1).compareTo(keys.get(i)) > 0)
				return false;
		}
		return true;
	}

	private void inOrder(Node node, ArrayList<K> keys) {
		if (root == null)
			return;
		inOrder(node.left, keys);
		keys.add(node.key);
		inOrder(node.right, keys);
	}

	public boolean isBalanced() {
		return isBalanced(root);
	}

	private boolean isBalanced(Node node) {
		if (node == null)
			return true;
		int balanceFactor = getBalanceFactor(node);
		if (Math.abs(balanceFactor) > 1)
			return false;
		return isBalanced(node.right) && isBalanced(node.left);
	}

	private int getHeight(Node node) {
		return node.height;
	}

	private int getBalanceFactor(Node node) {
		if (node == null)
			return 0;
		return getHeight(node.left) - getHeight(node.right);
	}

}